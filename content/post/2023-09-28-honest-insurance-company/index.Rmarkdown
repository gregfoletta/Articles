---
title: Honest Insurance Company
author: Greg Foletta
date: '2023-09-28'
slug: []
categories: []
tags: []
images: []
---

```{r include=FALSE}
library(tidyverse)
library(tidybayes)
library(RSelenium)
library(rvest)
library(glue)
library(cmdstanr)
library(here)
library(tidybayes)
library(bayesplot)
library(gganimate)
library(scales)
```



# Data Aquisition

```{sh include = FALSE}
# Stop running containers
if [ $(docker container ls -q --filter name=rsel --all) ]
then
        docker container stop rsel
        docker container rm rsel
fi
```

```{sh echo=TRUE, results = 'hide'}
docker run -d -p 4444:4444 --name rsel selenium/standalone-firefox:latest
```
```{sh include=FALSE}
sleep 5
```



```{r echo=TRUE, results = 'hide'}
rs <- remoteDriver(remoteServerAddr = '172.17.0.2', port = 4444L)
rs$extraCapabilities$pageLoadStrategy <- "eager"
rs$open()
```

```{r eval = FALSE}
kluger_source <-
    tibble(
        offset = 12 * c(0:100)
    ) |> 
    mutate(
        source = map(offset, ~{ 
                print(glue("Reqesting {.x}"))
                rs$navigate(glue("https://www.carsales.com.au/cars/used/toyota/kluger/?offset={.x}"))
                rs$getPageSource() |> pluck(1) |> read_html()
        } )
    )
```


```{r}
xpath_text <- function(html, xpath) { html_elements(html, xpath = xpath) |> html_text() }
```

```{r eval = FALSE}
kluger_data <-
    kluger_source |> 
    mutate(
        # Get entires that have odometer
        cards = map(source, ~html_elements(.x, xpath = "//li[@data-type = 'Odometer']/ancestor::div[@class = 'card-body']")),
        # Extract specific properties 
        price = map(cards, ~xpath_text(.x, xpath = ".//a[@data-webm-clickvalue = 'sv-price']")),
        title = map(cards, ~xpath_text(.x, xpath = ".//a[@data-webm-clickvalue = 'sv-title']")),
        odometer = map(cards, ~xpath_text(.x, xpath = ".//li[@data-type = 'Odometer']")),
        body = map(cards, ~xpath_text(.x, xpath = ".//li[@data-type = 'Body Style']")),
        transmission = map(cards, ~xpath_text(.x, xpath = ".//li[@data-type = 'Transmission']")),
        engine = map(cards, ~xpath_text(.x, xpath = ".//li[@data-type = 'Engine']"))
    ) |>
    select(-c(source, cards)) |>
    unnest(everything())
```

```{r include=FALSE}
kluger_data <- read_csv('data/carsales_kluger.csv')
```


```{r, comment=''}
kluger_data <-
kluger_data |>
    mutate(
        odometer = parse_number(odometer),
        price = parse_number(price),
        year = as.integer( str_extract(title, "^(\\d{4})", group = TRUE) ),
        drivetrain = str_extract(title, "\\w+$"),
        model = str_extract(title, "Toyota Kluger ([-\\w]+)", group = TRUE)
    )

str(kluger_data)
```

```{r echo = FALSE}
kluger_data |>
    ggplot() +
    geom_point(aes(odometer, price)) +
    labs(
        title = "Market for Toyota Klugers",
        subtitle = "Odometer Versus Price",
        x = "Odometer (km)",
        y = "Price ($)"
    ) + 
    scale_x_continuous(labels = scales::comma) +
    scale_y_continuous(labels = scales::comma) +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r echo = FALSE}
kluger_data |>
    ggplot() +
    geom_point(aes(odometer, log(price))) +
    labs(
        title = "Toyota Kluger Market",
        subtitle = "Odometer Versus Log(Price)",
        x = "Odometer (km)",
        y = "Log(Price) ($)"
    ) +
    scale_x_continuous(labels = scales::comma) +
    scale_y_continuous(labels = scales::comma) +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r echo=FALSE}
kluger_data |>
    ggplot() +
    geom_point(aes(odometer, log(price), colour = model), alpha = .3) +
    facet_wrap(~model) +
    labs(
        title = "Toyota Kluger Market",
        subtitle = "Odometer versus Log(Price) by Model",
        x = "Odometer (km)",
        y = "Log(Price) ($)"
    ) +
    scale_x_continuous(labels = scales::comma) +
    scale_y_continuous(labels = scales::comma) +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
kluger_data_filtered <-
    kluger_data |>
    # Centre the odometer variable
    mutate(
        odometer = (odometer - mean(odometer)) / sd(odometer)
    ) |>
    select(odometer, price)
```

```{r}
kluger_data_filtered |>
    ggplot() +
    geom_point(aes(odometer, log(price))) +
    labs(
        title = 'Toyota Kluger Market',
        subtitle = 'Standardised and Cenetered Odometer Values',
        x = 'Odometer (centered/standardised)',
        y = 'Log(price) ($)'
    )
```

# Modelling
```{r include=FALSE}
model_file_path <- here('content', 'post', '2023-09-28-honest-insurance-company', 'linear.stan')
```

```{r message=FALSE, warning=FALSE, comment=''}
kluger_model <- cmdstan_model(model_file_path)
kluger_model$print()
```
```{r echo=TRUE, comment=''}
kluger_fit <- kluger_model$sample(
    data = compose_data(kluger_data_filtered),
    seed = 123,
    chains = 4,
    parallel_chains = 4,
    refresh = 500,
)
```
    
```{r echo = FALSE}
kluger_fit |> 
    gather_draws(a, b) |> 
    ggplot() +
    geom_histogram(aes(.value, fill = as.factor(.chain)), bins = 100) +
    facet_wrap(vars(.variable), scales = 'free') +
    labs(
        title = "Toyota Kluger Market Linear Model",
        subtitle = "Histogram of Posterior Draws of Alpha & Beta Coefficients",
        x = "Coefficient Value",
        y = "Frequency",
        fill = "Chain"
    )
```
```{r echo=FALSE}
kluger_fit |> 
    gather_draws(a,b, sigma) |>
    ggplot() +
    geom_line(aes(.iteration, .value, colour = as_factor(.chain)), alpha = .5) +
    facet_grid(vars(.variable), scales = 'free_y') + 
    labs(
        title = "Toyota Kluger Market Model",
        subtitle = "MCMC Trace Plot",
        x = "Iteration",
        y = "Value",
        colour = "Chain"
    )
```


```{r echo = FALSE}
fit_mean_a <- kluger_fit$summary()$mean[2]
fit_mean_b <- kluger_fit$summary()$mean[3]

kluger_fit_animation <-
    kluger_fit |>
    spread_draws(a, b) |>
    ggplot() +
    geom_abline(aes(intercept = a, slope = b, group = .draw)) +
    transition_reveal(.draw) +
    geom_point(data = kluger_data_filtered, aes(odometer, log(price)), colour = 'gray') +
    geom_abline(intercept = fit_mean_a, slope = fit_mean_b, colour = 'blue') +
    guides(colour = guide_legend(override.aes = list(alpha = 1))) +
    labs(
        title = "Toyota Kluger Market Model",
        subtitle = "Odometer vs Log(Price) with MCMC Coefficients (Draw {frame_along})",
        x = "Odometer (km)",
        y = "Log(Price) ($)"
    )
 
animate(kluger_fit_animation, renderer = gifski_renderer())
```

```{r, comment=''}
kluger_fit$summary()
```

```{sh include = FALSE}
docker container stop rsel
docker container rm rsel
```

