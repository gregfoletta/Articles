---
title: Honest Insurance Company
author: Greg Foletta
date: '2023-09-28'
slug: []
categories: []
tags: []
images: []
---

```{r include=FALSE}
library(tidyverse)
library(tidybayes)
library(RSelenium)
library(rvest)
library(glue)
```



# Data Aquisition

```{sh include = FALSE}
# Stop running containers
if [ $(docker container ls -q --filter name=rsel --all) ]
then
        docker container stop rsel
        docker container rm rsel
fi
```

```{sh include=FALSE}
docker run -d -p 4444:4444 --name rsel selenium/standalone-firefox:latest
```
```{sh include=FALSE}
sleep 5
```



```{r include=FALSE}
rs <- remoteDriver(remoteServerAddr = '172.17.0.2', port = 4444L)
rs$extraCapabilities$pageLoadStrategy <- "eager"
rs$open()
```

```{r cache=TRUE, include=FALSE}
kluger_source <-
    tibble(
        offset = 12 * c(0:80)
    ) |> 
    mutate(
        source = map(offset, ~{ 
                print(glue("Reqesting {.x}"))
                rs$navigate(glue("https://www.carsales.com.au/cars/used/toyota/kluger/?offset={.x}"))
                rs$getPageSource() |> pluck(1) |> read_html()
        } )
    )
```


```{r}
xpath_text <- function(html, xpath) { html_elements(html, xpath = xpath) |> html_text() }
```

```{r}
kluger_data <-
    kluger_source |> 
    mutate(
        # Get entires that have odometer
        cards = map(source, ~html_elements(.x, xpath = "//li[@data-type = 'Odometer']/ancestor::div[@class = 'card-body']")),
        # Extract specific properties 
        price = map(cards, ~xpath_text(.x, xpath = ".//a[@data-webm-clickvalue = 'sv-price']")),
        title = map(cards, ~xpath_text(.x, xpath = ".//a[@data-webm-clickvalue = 'sv-title']")),
        odometer = map(cards, ~xpath_text(.x, xpath = ".//li[@data-type = 'Odometer']")),
        body = map(cards, ~xpath_text(.x, xpath = ".//li[@data-type = 'Body Style']")),
        transmission = map(cards, ~xpath_text(.x, xpath = ".//li[@data-type = 'Transmission']")),
        engine = map(cards, ~xpath_text(.x, xpath = ".//li[@data-type = 'Engine']"))
    ) |>
    select(-c(source, cards)) |>
    unnest(everything())
```

```{r}
kluger_data <-
kluger_data |>
    mutate(
        odometer = parse_number(odometer),
        price = parse_number(price),
        year = as.integer( str_extract(title, "^(\\d{4})", group = TRUE) ),
        drivetrain = str_extract(title, "\\w+$"),
        model = str_extract(title, "Toyota Kluger ([-\\w]+)", group = TRUE)
    )

print(kluger_data)
```

```{r echo = FALSE}
kluger_data |>
    ggplot() +
    geom_point(aes(odometer, price))
```
```{r}
kluger_data <- kluger_data |> mutate( log_price = log10(price) )
```

```{r echo = FALSE}
kluger_data |>
    ggplot() +
    geom_point(aes(odometer, log_price))
```
```{r echo=FALSE}
kluger_data |>
    ggplot() +
    geom_point(aes(odometer, log_price, colour = model)) +
    facet_wrap(~model)
```

```{r echo=FALSE}
kluger_data_filtered <-
    kluger_data |>
    filter(model %in% c('GX', 'GXL'))

kluger_data_filtered |>
    ggplot() +
    geom_point(aes(odometer, log_price, colour = model))
```
# Modelling

```{sh include = FALSE}
docker container stop rsel
docker container rm rsel
```

