---
title: Telling a Spatial Story 
author: 'Greg Foletta'
date: '2022-09-12'
slug: spatial_story 
categories: [R Geospatial Animation]
---

My friend Jen is currently writing a thesis, and she reached out to me as she had a presentation coming up wanted to add some visualisation to it. I jumped at the chance to help as it forced me to take a look at two topics that I'd not yet taken a look at yet: spatial data and animation.

In this (relatively short) article I'll take you through how I created an animation based on spatial data for Jen.

# What's the Story?

To be more specific, Jen's thesis is on post-war migration into the innter-northern suburbs of Melbourne, Australia. Using census data from the 50s, 60s, and 70, she wanted to tell the story of this migration, specifically the increase in concentrations on a per suburb basis and how how the migrations geographically changed over this time period.

My thinking that, to best tell this story, I could take the data Jen had and overlay this on to the geography of Melbourne. This could then be animated, transitioning between the years in the census. This would help to tell a succinct visual story of the movement of these immigrant populations.

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(sf)
library(openxlsx)
library(gganimate)
library(scales)
library(gt)
```

# Starting with the End


```{r}
knitr::load_cache(label = "output_animation")
```
    


# Step 1: The Data

Jen was able to provide me the migration data in *.xlsx* format in a human readable format, to which I manually changed into a tidy format. My preference would have been to script this tidying as well for reproducibility, but due to time constraints the manual method was chosen.

We can see the data below, showing the year of the census, the suburb, and the total number and percentage of the population born overseas. 
```{r}
migrant_data <- 
    read.xlsx('data/migrant_population_growth.xlsx', sheet = 'Tidied') %>%
    as_tibble() %>% 
    print()
```
The next step was to get geospatial data for these suburbs. Thankfully the Australian government has [shapefile data](https://data.gov.au/dataset/ds-dga-af33dd8c-0534-4e18-9245-fc64440f742e/distribution/dist-dga-4d6ec8bb-1039-4fef-aa58-6a14438f29b1/details?q=) available for suburbs and locality within Victoria.

We can render the full context of this geospatial data:

```{r}
vic_localities <- read_sf('data/VIC_LOC_POLYGON_shp GDA2020/vic_localities.shp')

vic_localities %>% 
    ggplot() +
    geom_sf(size = .1)
```

This data shows local government areas for the entire state of Victoria, Australia. We're only interested in the inner-Melbourne area, so we crop this to the relevant latitudes and longitudes:

```{r warning=FALSE}
inner_melb_localities <-
    vic_localities %>% 
    st_crop(xmin=144.7, xmax=145.1, ymin=-37.95, ymax=-37.6)
```
```{r, echo = FALSE}
inner_melb_localities %>% 
    ggplot() +
    geom_sf(size = .3)
```

With our two key pieces of data, we can start to put it together.

# Step 2 - Data Wrangling

Next step is to merge our migration data with our geospatial data, using suburb as our key. However it's a little more complex that a simple join as we want to ensure, for every year, we have all of the geospatial information so we can render the full map.

The way to takle this is with a `group()`, `nest()`, `mutate()` and `unnest()`. This would normally be one big pipeline, but I'll break it out so we can see the intermediary outputs.

I first take our migration data and group by the *Year* variable, then nest the 

```{r}
migrant_data_geo <-
    migrant_data %>% 
    group_by(Year) %>% 
    nest() |> 
    mutate(
        geo = map(data, ~{ right_join(.x, inner_melb_localities, by = c('Suburb' = 'LOC_NAME')) })
    ) %>% 
    unnest(geo) |> 
    arrange(Suburb) %>% 
    mutate(
        Percentage = replace_na(Percentage, 0),
        Total = replace_na(Total, 0),
    ) %>%
    select(-data) %>%
    ungroup() %>% 
    st_as_sf() 
```


# Step 3 - Rendering


```{r ref.label=output_animation, cache=TRUE}
migrant_data_geo_animation <- 
    migrant_data_geo %>%
    ggplot() +
    geom_sf(aes(fill = Percentage)) +
    labs(
        title = "Melbourne - Percentage Residents Born Overseas",
        subtitle = "Census Year: {closest_state}"
    ) +
    theme(
        plot.title = element_text(size = 10),
        plot.subtitle = element_text(size = 8),
        legend.title = element_text(size = 6),
        legend.text= element_text(size = 4)
    ) +
    scale_fill_distiller(name = "Percent", trans = 'reverse', labels = percent) +
    transition_states(Year, transition_length = 3, state_length = 5)

migrant_data_geo_animation
```
