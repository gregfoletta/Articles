---
title: 'A Day in the Life: The BGP Table'
author: Greg Foletta
date: '2024-01-08'
slug: []
categories: []
tags: []
images: []
---
```{r include=FALSE}
library(tidyverse)
library(jsonlite)
library(feasts)
library(tsibble)
library(tictoc)
library(glue)
```


```{sh}
#gunzip -c data/full_table.zip > full_table.json
time jq -s '. | map( select(.type == "UPDATE") | { recv_time, id, type, "nlri": .message.nlri, "withdrawn_routes": .message.withdrawn_routes, "path_attributes": .message.path_attributes } )' data/full_table_5_head.json > full_table_filtered.json
```

```{r}
tic("Start BGP load")
bgp <-
fromJSON('data/full_table_5_transform_day.zip') |>
    as_tibble() 
    #mutate(path_attributes = map(path_attributes, ~{ pivot_wider(.x, names_from = type, values_from = -c(type, type_code, flags, flags_low_nibble), names_sep = '.') })) |> 
    #unnest(path_attributes, names_sep = '.') |> 
    #select(where(~!(all(is.na(.)) | all(. == 'NULL')))) |>
    #select(!matches('type_code|flags')) s
toc("End BGP load")
```


```{r}
tic("Load and Cleaning")
bgp <-
    read_rds('data/full_table.rds') |> 
    mutate(
        recv_time = as.POSIXct(recv_time),
        ip_version = map_chr(path_attributes, ~{ if_else(any(.x$type == "MP_REACH_NLRI" | .x$type == "MP_UNREACH_NLRI"), 'v6', 'v4') }),
        pure_withdraw = 
            ( map_lgl(withdrawn_routes, ~{ length(.x) > 0 }) & map_lgl(nlri, ~{ length(.x) == 0 }) ) | 
            ( map_lgl(path_attributes, ~{ any(.x$type == "MP_UNREACH_NLRI") & !any(.x$type == "MP_REACH_NLRI") }) )
    ) |>
    group_by(ip_version) |>
    mutate(initial_send = recv_time - first(recv_time) < 30) |>
    ungroup()
toc()
```

# Updates Over Time

Initial block of paths.

```{r}
bgp |> 
    filter(initial_send) |> 
    group_by(ip_version) |> 
    count(recv_time) |>
    summarise(paths = sum(n)) |>
    ggplot() +
    geom_col(aes(ip_version, paths, fill = ip_version)) +
    labs(
        title = 'Initial Send of BGP Paths',
        subtitle = 'IPv4 and IPv6',
        fill = 'IP Version',
        x = 'IP Version',
        y = 'Paths'
    ) 
```
```{r}
# Start looking at only IPv4 routes
bgpv4 <- bgp |> filter(ip_version == 'v4')
```

```{r}
tic()
bgp <-
    bgp |> 
    unnest(path_attributes, names_sep = '.') |>
    filter(path_attributes.type %in% c('AS_PATH', 'AS4_PATH')) |>
    group_by(id) |>
    slice_tail(n = 1) |>
    ungroup() |> 
    select(id, path_attributes.path_segments) |>
    unnest(path_attributes.path_segments) |>
    unnest(asns) |>
    group_by(id) |>
    summarise(as_path = list(asns)) |> 
    ungroup() |> 
    right_join(bgp, by = 'id') 
toc()
```
```{r}
bgp <-
    bgp |> 
    mutate(
        originating_asn = map_int(as_path, ~{ 
            if (is.null(.x)) { return(NA_integer_) }
            n = length(.x)
            .x[[n]] 
        }),
        as_path_len = map_int(as_path, ~length(.x))
    )
```

```{r}
bgp |>
    group_by(ip_version) |> 
    slice_max(order_by = as_path_len, n = 10) |>
    mutate(order = row_number()) |>
    ungroup() |> 
    ggplot() +
    geom_col(aes(order, as_path_len, fill = ip_version)) +
    facet_wrap(~ip_version, scales = 'free') +
    scale_x_discrete()
```
```{r}
bgp |>
    filter(ip_version == 'v4') |>
    slice_max(as_path_len, n = 1) |>
    mutate(as_path_string = paste(as_path)) |> 
    pull(as_path_string) |>
```


```{r}
bgp |>
    filter(initial_send) |>
    unnest(nlri) |>
    # Remove default
    filter(nlri != '0.0.0.0/0') |> 
    separate(nlri, into = c('prefix', 'prefix_len'), sep = '/') |>
    count(prefix_len) |>
    mutate(prefix_len = fct_reorder(prefix_len, n)) |> 
    ggplot() +
    geom_col(aes(prefix_len, n))
```

```{r}
bgp |> 
    filter(!initial_send) |> 
    group_by(ip_version) |>
    count(recv_time) |>
    ggplot() +
    geom_line(aes(recv_time, n, colour = ip_version)) +
    facet_wrap(~ip_version, nrow = 2) +
    scale_x_datetime()
```

```{r}
tic("Unnest")
bgpv4 <-
    bgp |> 
    filter(ip_version == 'v4') |> 
    unnest(path_attributes, names_sep = '.') 
toc()
```
```{r}
bgpv4 |>
    filter(!path_attributes.type_code %in% c(1,2,3)) |>
    mutate(pa = glue('{path_attributes.type} ({path_attributes.type_code})')) |>
    count(pa) |>
    mutate(pa = fct_reorder(pa, n)) |> 
    ggplot() +
    geom_col(aes(pa, n)) +
    coord_flip()
```
```{r}
 bgpv4 |>
    filter(path_attributes.type_code == 255)
```



```{sh}
rm full_table.json
```

