---
title: TCP Analysis
author: ''
date: '2024-04-07'
slug: []
categories: []
tags: []
images: []
---

```{r include=FALSE}
library(tidyverse)
library(cmdstanr)
library(tidybayes)
library(gt)
library(here)

knitr::opts_chunk$set(
    comment = ''
)
```



    
```{r load}
pcap <- read_rds('20240417_pcap.Rdata')
```

```{r clean}
tcp_segments <-
    pcap |>
    filter(is.na(udp.stream)) |>
    unnest(tcp.flags_tree) |> 
    mutate(
        time = as.double(frame.time_epoch),
        id = as.double(frame.number)
    ) |> 
    mutate(time  = as.POSIXct(time)) |> 
    select(c(time, id, eth.src, tcp.stream, tcp.srcport, tcp.dstport, tcp.flags.syn, tcp.flags.ack, tcp.flags.fin, tcp.flags.reset)) |>
    mutate(across(starts_with('tcp.flags'), as.integer))
```


```{r duration}
tcp_segments |> summarise(duration = last(time) - first(time)) |> gt()
```

# Connections Per Second
```{r}
tcp_connections <-
    tcp_segments |>
    filter(tcp.flags.syn == 1 & tcp.flags.ack == 0) |>
    group_by(time = floor_date(time, 'seconds')) |>
    summarise(cps = sum(tcp.flags.syn)) |> 
    mutate(time_d = as.integer(time)) |> 
    full_join(
        tibble(
            time_d = as.integer( first(tcp_segments$time):last(tcp_segments$time) ),
        ),
        by = 'time_d'
    ) |>
    arrange(time_d) |>
    mutate(
        cps = if_else(is.na(cps), 0, cps),
        time = as.POSIXct(time_d)
    ) |>
    select(-time_d) |>
    # Filter out the first zero rows
    filter(cumsum(cps) != 0) |>
    arrange(desc(time)) |>
    # Filter out the last zero rows
    filter(cumsum(cps) != 0) |>
    arrange(time)
```

```{r stan_model}
tcp_model <- cmdstan_model('tcp_model.stan')

tcp_fit <- tcp_model$sample(
    data = compose_data(tcp_connections),
    seed = 2347,
    chains = 4,
    parallel_chains = 4,
    refresh = 500
)
```

```{r assess_chains}
tcp_fit |> 
    gather_draws(alpha, beta) |>
    recover_types() |> 
    ggplot() +
    geom_line(aes(.iteration, .value, colour = as_factor(.chain)), alpha = .8) +
    facet_grid(vars(.variable), scales = 'free_y')
```

```{r assess_lambda}
tcp_fit |> 
    gather_draws(alpha, beta) |>
    recover_types() |> 
    ggplot(x = .value) +
    geom_histogram(aes(y = after_stat(density), fill = as.factor(.chain)), bins = 100) +
    facet_wrap(vars(.variable), scales = 'free')

tcp_fit |> 
    gather_draws(alpha, beta) |>
    recover_types() |>
    summarise(mean = mean(.value))
   
```

```{r}
tcp_connections |>
    mutate(rcps = rnbinom(n(), 0.0752898, 0.45373726)) |>
    pivot_longer(cols = c(cps, rcps)) |>
    ggplot() +
    geom_histogram(aes(log(value), fill = name), position = 'dodge') 
```


# Connection Duration

```{r}
tcp_segments |>
    group_by(tcp.stream) |> 
    slice_tail() |>
    ungroup() |>
    filter(tcp.flags.fin == 0 & tcp.flags.reset == 0 & tcp.flags.syn != 1)

```


