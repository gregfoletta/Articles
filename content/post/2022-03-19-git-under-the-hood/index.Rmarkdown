---
title: Git Under the Hood
author: 'Greg Foletta'
date: '2022-03-19'
slug: git-under-the-hood
categories: [git]
---

---intro---

In this article we're going to take a look under the covers and investigate the fundamental constructs that git uses. We'll start off with its storage model and take a look at blobs, trees and commits, using graphs to help visualize the connections between these objects. We'll look at how branches are implemented, and we'll unpack the git index file to understand what happens during the staging of a commit.

All the way through we'll limit ourselves to five simple git commands:

- git init
- git add
- git commit
- git branch
- git checkout

Our actual invesitgation of git's internals will be done using simple command line utilities operating on files. The reason is simple: by removing the abstractions and focusing in on file operations, the elegance and simplicity of git becomes obvious, and (hopefully) makes it easier to understand.



```{zsh include=FALSE}
touch file_x
rm -rf .git file_* subdir
```

```{r include=FALSE}
library(tidyverse)
library(tidygraph)
library(ggraph)
library(git2r)
library(stringr)
library(glue)

knitr::opts_chunk$set(
    comment = ''
)

```


```{r include=FALSE}
repo_nodes <- function(repo = '.') {
    # First get all of the objects in the repo
    one_commit_nodes <- 
        odb_objects(repo = repo) 
    
    # We then want to add a 'content' column with:
    #   - Content of the blobs
    #   - Nothing for the trees
    #   - Commit message for the commits
    
    # First adding the blob content
    one_commit_nodes <-
        one_commit_nodes %>% 
        filter(type == 'blob') %>%
        select(sha) %>% 
        mutate(content = map(sha, ~content(lookup(repo, sha = .x)))) %>% 
        right_join(one_commit_nodes, by = 'sha')
   
    one_commit_nodes <-
        one_commit_nodes %>%
        filter(type == 'commit') %>%
        select(sha) %>%
        mutate(message = map(sha, ~ {
            lookup(repo, sha = .x) %>% as.data.frame() %>% magrittr::extract2('message')
        })) %>% 
        right_join(one_commit_nodes, by = 'sha')
    
    one_commit_nodes
}

repo_edges <- function(repo = '.') {
    
# Pull out tree objects, run ls_tree to list what they
# point to which becomes out edges
tree_to_blob_edges <-
    odb_objects(repo = repo) %>% 
    filter(type == 'tree') %>% 
    mutate(blobs = map(sha, ~ls_tree(.x, recursive = FALSE))) %>%
    unnest(blobs, names_repair = 'universal') %>% 
    select(
        from = sha...1,
        to = sha...6,
    )


# Pull out the commits and add an edge from the commit to the root tree
### Have removed parent commit link
commit_to_tree <-
    odb_objects(repo = repo) %>%
    filter(type == 'commit') %>%
    mutate(tree = map_chr(sha, ~ {
        lookup(repo, .x) %>% tree() %>% .$sha
    })) %>% 
    mutate(parent_commit = map(sha, ~ {
        lookup(repo, .x) %>% parents() %>% as.data.frame()  %>% magrittr::extract2('sha')
    })) %>%
    unnest(parent_commit, keep_empty = TRUE) %>% 
    select(
        from = sha,
        to = tree
    )

commit_to_parent_commit <-
    odb_objects(repo = repo) %>%
    filter(type == 'commit') %>%
    mutate(parent_commit = map(sha, ~ {
        lookup(repo, .x) %>% parents() %>% as.data.frame()  %>% magrittr::extract2('sha')
    })) %>%
    unnest(parent_commit) %>% 
    select(
        from = sha,
        to = parent_commit 
    )

    bind_rows(
        tree_to_blob_edges,
        commit_to_tree,
  #      commit_to_parent_commit
    )
}
```


```{r include=FALSE}
# Graphing function
git_graph <- function(graph) {
    graph %>% 
    ggraph(layout = 'sugiyama') +
    geom_node_point(aes(colour = type), size = 10) +
    geom_edge_link(arrow = arrow(type = 'closed', length = unit(4, units = 'mm'))) +
    geom_node_label(aes(filter = type == 'commit', label = glue("{ str_sub(sha, end = 4)}\n'{ str_trim(message) }'")), repel = TRUE) +
    geom_node_label(aes(filter = type == 'tree', label = glue("{ str_sub(sha, end = 4)}")), repel = TRUE) +
    geom_node_label(aes(filter = type == 'blob', label = glue("{ str_sub(sha, end = 4)}\n'{ content }'")), repel = TRUE)
}
```


# Initialisation

We'll start by initialising an empty git repository. This creates a *.git* directory in the root directory of the repository. It's a root in that all subdirectories and files below this point will be considered part of the the repository. This is known as the **working tree**.

There's a bunch of stuff that's created, but we'll prune it back to the absolute bare minimum of what git considers a git repository.

```{zsh}
git init -q
rm -rf .git/{hooks,info,config,branches,description}
rm -rf .git/objects/{info,pack}
rm -rf .git/refs/{heads,tags}

tree .git
```


# Blobs

The first fundamental git object we'll look at is the *blob*. Let's create a file and use the `git add` command to add it to the staging area and see what this has done in our .git directory.

```{zsh}
echo "Root" > file_x
git add file_x

tree .git
```

We can see two new files - an index and an object. We'll get to the index later in the article, for now let's focus on the object. It appears to be names with some sort of hash value, and the file is compressed data.

```{zsh}
file .git/objects/93/39e13010d12194986b13e3a777ae5ec4f7c8a6
```

If we decompress and look inside, we can see the file is in a "type, length, value" or TLV format, with the type being a blob, the length of the value being 6 bytes, and the value being "Hello".

```{zsh}
pigz -cd .git/objects/93/39e13010d12194986b13e3a777ae5ec4f7c8a6 | hexdump -C
```

All data in git is stored in this manner. So what we can say is that git is an object store for data, where the objects are addressed by a hash. 

A key point to note at this stage is that there's no information about the file contained in these blobs: no path or file name, no permissions. It's only the contents of the file. 

How is this hash calculated? It's simply the SHA hash of the TLV. 

```{zsh}
echo "blob 5\0Root" | shasum
```

Let's explore this further. We'll create a subdirectory and add two more files, one of which will have the same contents as our first file.

```{zsh}
mkdir subdir
echo "Root & Sub" > file_y
echo "Root & Sub" > subdir/file_z

git add file_y subdir 

tree .git
```

Two things that stand out here. First is that while we have a total of three files, there's only two objects. This is because blobls are only concerned with the contents of the files, and we have only two unique pieces of content.

The second is that, like the filenames, theres no reference to the subdirectory here either. We'll see in the next section where this information is stored.

Over the course of the article we'll build up a graph of the objects in the git repository. Here's out starting point: two blobs, the first four characters of their hash, and their contents.

```{r echo=FALSE, message=FALSE, warning=FALSE}
tbl_graph(
    nodes = repo_nodes()
) %>%
    git_graph() +
    labs(
        title = 'Git Object Structure',
        subtitle = 'Blob Objects'
    )

```

# Tree

So where is the file system information stored? This is the role of the tree object. If we use the analogy of a disk filesystem and the blob is the raw data on the disk, then the tree object is similar to the inode. It holds the metadata of the file, as well as a pointer to the blob object.

Let's perform our first commit and see what's changed in the repository.

```{zsh}
git commit -m "First Commit"

tree .git
```

Ok, there's a lot there, but let's focus in again on the objects where we have an additional three. I've done the hard work of determining which is which, so let's take a look at the first of the tree objects.

```{zsh}
pigz -cd .git/objects/4e/eafbc980bb5cc210392fa9712eeca32ded0f7d | hexdump -C
```

This is a little harder to interpret as some of the information is in a binary representation. Again I've done the hard to work to determine the structure, so we can unpack it into a friendlier, plain-text representation:

```{zsh}
pigz -cd .git/objects/4e/eafbc980bb5cc210392fa9712eeca32ded0f7d |\
perl -nE 'print join "\n", unpack("Z*(Z*H40)*")'
```
Again we have the type of object, then the of the tree object. Then we have an entry for each of the filesystem objects in the root of our git repository. The first is the *file_x* file, with its permnissions, it's filename, and a pointer to the blob object of its contents.

**Add note on limited permissions**.

The second is the subdir directory, but instead of pointing to a blob object, this points to another tree object. Taking a look inside that:

```{zsh}
pigz -cd .git/objects/67/21ae08f27ae139ec833f8ab14e3361c38d07bd |\
perl -nE 'print join "\n", unpack("Z*(Z*H40)*")'
```
This object point to the two files within that subdirectory. Keen eyes may notice that both *file_x* in the root and *file_z* point to the same hash, as those files have the same contents. 

We can visualise this as a graph:
    
```{r echo=FALSE, message=FALSE, warning=FALSE}
# Create the graph, filtering out the commit
tbl_graph(
    nodes = repo_nodes(),
    edges = repo_edges()
) %>%
    filter(type != 'commit') %>% 
    git_graph() +
    labs(
        title = 'Git Object Structure',
        subtitle = 'Tree and Blob Objects'
    )
``` 
The hash value of the tree objects is directly dependent on the name of the file/directory, and its permissions. But it's indirectly dependent on the contents of the files: if that changes, the hash of the blob changes, and so the hash of the tree changes.

# Commit

Our third and most visible object is the commit. Let's take a look inside. Because the hash of the commit is based on time, and I generate this article dynamically, I have to calculate the hash and thus the path to the commit. We'll talk about branches later, but this will give you an idea about how they work.

```{zsh}
# Get the commit object 
COMMIT_DIR=$(cat .git/refs/heads/master | cut -c 1-2)
COMMIT_OBJ=$(cat .git/refs/heads/master | cut -c 3-)

pigz -cd .git/objects/$COMMIT_DIR/$COMMIT_OBJ |\
perl -0777 -nE 'print join "\n", unpack("Z*A*")'
```

Again, like the blob and the tree, we have our type an length of the object. We've then got a few different pieces of information:

The first is reference to a tree object. This is the tree objects that represents the root directory of the repository. The next is the author of the commit, with their name, email address, commit time and the UTC offset. The person who authored the commit doesn't have to be the same person who commited it to the repository, so there's also a line for the commiter. Following this is the commit message, which is free text input at the time of commit which (should) discuss the changes contained in the commit.

Placing this on our graph and we can see the full structure:

```{r echo=FALSE, message=FALSE, warning=FALSE}
# Create the graph, this time without filtering the commit
tbl_graph(
    nodes = repo_nodes(),
    edges = repo_edges()
) %>%
    git_graph() +
    labs(
        title = 'Git Object Structure',
        subtitle = 'Tree and Blob Objects'
    )
```
If the value of any one of the fields changes in the commit, it will be references by a new hash. If a file changes downstream, this will result in one or more changes to tree objects, culminating in a change to hash of the tree object that represents the root directory of the repository. The value of the 'tree' field in the commit changes, and theremore the hash of the commit changes.

This first commit is actually a special commit as it has no parents. Every other commit from this point on - no matter what the branch - will be a descendant of this commit. So from any point, we can trace back the history of the changes to the files in the repository all the way back to this nascent state. If we change the contents of *file_z*, add it to the staging area, and create a second commit we can see how this is represented.

```{zsh}
# Change the contents, add, and create a second commit
echo "Root Changed" > file_x
git add file_x
git commit -q -m "Second Commit"

# Determine the path to the second commit object
COMMIT_DIR=$(cat .git/refs/heads/master | cut -c 1-2)
COMMIT_OBJ=$(cat .git/refs/heads/master | cut -c 3-)

# Unpack the contents of the commit
pigz -cd .git/objects/$COMMIT_DIR/$COMMIT_OBJ |
perl -0777 -nE 'print join "\n", unpack("Z*A*")'
```

We see an additional *parent* line in the commit, which references the hash of the commit that came before it. We can place this on our graph

```{r echo=FALSE, message=FALSE, warning=FALSE}
# Create the graph, this time without filtering the commit
tbl_graph(
    nodes = repo_nodes(),
    edges = repo_edges()
) %>%
    git_graph() +
    labs(
        title = 'Git Object Structure',
        subtitle = 'Multiple Commit Hierarchy'
    )
```

This is the core of git. Three objects types resulting in content-addressable storage. THe commits represent 'snapshots' of the repository at a point int time, which point to a parent commit, and the root of a tree. The tree has nodes that represent directories, holding metadata about files, and point towards blobs of data. The data itself is just that: data. Git doesn't calculate any differences between file changes: a one byte change to a file, this results in a new hash and this a completely new blob object that will be pointed to. In terms of the [space-time trade-off](https://en.wikipedia.org/wiki/Space%E2%80%93time_tradeoff), git chooses space over time, resulting in a simple model of data changes over time.

Working with 160 bit hashes is all well and good for a machine, but not human friendly. This is where branches come in.

# Branches

Branches are relatively simple: they are a named pointer to a commit hash. This pointer is updated whenever a commit occurs. The default branch was master, but in git versions 2.28 and higher this is now configurable.

Local branches are stored in the *.git/refs/heads* directory.

```{zsh}
cat .git/refs/heads/master
```

If we create a new branch, it will point to the same spot as our current HEAD:

```{zsh}
git branch new_branch

sed -s 1F .git/refs/heads/*
```

If change a file and and commit, we'll see the hash that the branch points to change.

```{zsh}
echo "Branch Change" > file_x
git add file_x
git commit -q -m "Third Commit"

sed -s 1F .git/refs/heads/*

```


# Index

The final file we're going to look at is the index. While it has a few different roles, we'll be focusing on it's main role as the 'staging area'. Let's crack it open and have a look at the structure:

```{zsh}
perl -0777 -nE '
# Extract out each file in the index
my @index = unpack("A4 H8 N (N4 N2 n B16 N N N H40 B16 A*)");

say "Index Header: " . join " ", @index[0..2];
say "lstat() info: " . join " ", @index[3..12];
say "Object & Filepath: " . join " ", @index[13..16];

' .git/index
```
The first line shows the the four byte 'DIRC' signature (which stands for 'directory cache'), the version number, and the number of entries (files in the index). We'll be unpacking only one of the entries. 

The first fields contain information from the `lstat()` function: last changed and modified time, the device and inode, permissions, uid and gid, and file size. These values allow git to quickly determine if files in the working tree have been modified.

We next have the hash of the object, a flags field (including the length of path), and the path of the object.

If we recall back in the *Blobs* section, when we added a file to the staging are via `git add`, the index was created. Let's modify *file_x* and add it to the staging area:

```{zsh}
echo "Index Modification" > file_x
git add file_x
```

And we'll re-take a look at the index:

```{zsh echo=FALSE}
perl -0777 -nE '
my @index = unpack("A4 H8 N (N4 N2 n B16 N N N H40 B16 A*)");
say "ctime, mtime: " . join " ", @index[(1, 3)];
say "object, filepath: " . join " ", @index[(14, 16)];
' .git/index
```

The `lstat()` values have changed, and so has the object that *file_x* points to. If a `git commit` is issued, this next commit will represent the current state of the index. In our example, a new tree object will be created with *file_x* pointing towards the object that's in the index (as well as pointing to the current, unchanged tree representing the sub-directory). As this is the root tree object, the new commit will point to this.

# Summary

In this article we dived in to the internals of git. We first looked at gits data model.

We then looked at branches.

Finally we looked at the index.

---outro---


```{zsh include=FALSE}
rm -rf .git file_* subdir
```
