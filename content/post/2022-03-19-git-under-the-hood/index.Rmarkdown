---
title: Git Under the Hood
author: 'Greg Foletta'
date: '2022-03-19'
slug: git-under-the-hood
categories: [git]
---

```{zsh include=FALSE}
touch file_x
rm -rf .git file_* subdir
```

```{r include=FALSE}
library(tidyverse)
library(tidygraph)
library(ggraph)
library(git2r)
library(stringr)
library(glue)

knitr::opts_chunk$set(
    comment = ''
)

```


```{r include=FALSE}
repo_nodes <- function(repo = '.') {
    # First get all of the objects in the repo
    one_commit_nodes <- 
        odb_objects(repo = repo) 
    
    # We then want to add a 'content' column with:
    #   - Content of the blobs
    #   - Nothing for the trees
    #   - Commit message for the commits
    
    # First adding the blob content
    one_commit_nodes <-
        one_commit_nodes %>% 
        filter(type == 'blob') %>%
        select(sha) %>% 
        mutate(content = map(sha, ~content(lookup(repo, sha = .x)))) %>% 
        right_join(one_commit_nodes, by = 'sha')
   
    one_commit_nodes <-
        one_commit_nodes %>%
        filter(type == 'commit') %>%
        select(sha) %>%
        mutate(message = map(sha, ~ {
            lookup(repo, sha = .x) %>% as.data.frame() %>% magrittr::extract2('message')
        })) %>% 
        right_join(one_commit_nodes, by = 'sha')
    
    one_commit_nodes
}

repo_edges <- function(repo = '.') {
    
# Pull out tree objects, run ls_tree to list what they
# point to which becomes out edges
tree_to_blob_edges <-
    odb_objects(repo = repo) %>% 
    filter(type == 'tree') %>% 
    mutate(blobs = map(sha, ~ls_tree(.x, recursive = FALSE))) %>%
    unnest(blobs, names_repair = 'universal') %>% 
    select(
        from = sha...1,
        to = sha...6,
    )


# Pull out the commits and add an edge from the commit to the root tree
commit_to_tree <-
    odb_objects(repo = repo) %>%
    filter(type == 'commit') %>%
    mutate(tree = map_chr(sha, ~ {
        lookup(repo, .x) %>% tree() %>% .$sha
    })) %>%
    mutate(parent_commit = map(sha, ~ {
        lookup(repo, .x) %>% parents() %>% as.data.frame()  %>% magrittr::extract2('sha')
    })) %>%
    unnest(parent_commit, keep_empty = TRUE) %>% 
    select(
        from = sha,
        to = tree
    )

commit_to_parent_commit <-
    odb_objects(repo = repo) %>%
    filter(type == 'commit') %>%
    mutate(parent_commit = map(sha, ~ {
        lookup(repo, .x) %>% parents() %>% as.data.frame()  %>% magrittr::extract2('sha')
    })) %>%
    unnest(parent_commit) %>% 
    select(
        from = sha,
        to = parent_commit 
    )

    bind_rows(
        tree_to_blob_edges,
        commit_to_tree,
        commit_to_parent_commit
    )
}

git_graph <- function(graph) {
    graph %>% 
    ggraph() +
    geom_node_point(aes(colour = type), size = 10) +
    geom_edge_link(arrow = arrow(type = 'closed', length = unit(4, units = 'mm'))) +
    geom_node_label(aes(filter = type == 'commit', label = glue("{ str_sub(sha, end = 8)}\n'{ str_trim(message) }'")), repel = TRUE) +
    geom_node_label(aes(filter = type == 'tree', label = glue("{ str_sub(sha, end = 8)}")), repel = TRUE) +
    geom_node_label(aes(filter = type == 'blob', label = glue("{ str_sub(sha, end = 8)}\n'{ content }'")), repel = TRUE)
}
```


# Init and Cleaning

```{zsh}
git init -q
rm -rf .git/{hooks,info,config,branches,description}
rm -rf .git/objects/{info,pack}
rm -rf .git/refs/{heads,tags}

tree .git
```


# Blobs

```{zsh}
echo "Hello" > file_x
git add file_x

tree .git
```

```{zsh}
pigz -cd .git/objects/e9/65047ad7c57865823c7d992b1d046ea66edf78 | hexdump -C
```

```{zsh}
echo "blob 6\0Hello" | shasum
```

```{zsh}
mkdir subdir

echo "Hello Again" > subdir/file_y
echo "Hello" > subdir/file_z

git add subdir

tree .git
```

```{r echo=FALSE, message=FALSE, warning=FALSE}
tbl_graph(
    nodes = repo_nodes()
) %>%
    git_graph() +
    labs(
        title = 'Git Object Structure',
        subtitle = 'Blob Objects'
    )

```


# Tree

```{zsh}
git commit -m "First Commit"

tree .git
```

```{zsh}
pigz -cd .git/objects/2b/04fd32b556e89dfa44b332f0cc59541879189a | hexdump -C
```

```{zsh}
cat .git/objects/2b/04fd32b556e89dfa44b332f0cc59541879189a |\
pigz -d |\
perl -nE 'print join "\n", unpack("Z*(Z*H40)*")'
```

```{zsh}
pigz -cd .git/objects/44/9a4c7ba21764840c8abc1eb9698596fdf33f3d |\
perl -nE 'print join "\n", unpack("Z*(Z*H40)*")'
```



    
```{r echo=FALSE, message=FALSE, warning=FALSE}
# Create the graph, filtering out the commit
tbl_graph(
    nodes = repo_nodes(),
    edges = repo_edges()
) %>%
    filter(type != 'commit') %>% 
    git_graph() +
    labs(
        title = 'Git Object Structure',
        subtitle = 'Tree and Blob Objects'
    )
``` 

# Commit

```{zsh}
COMMIT_DIR=$(git show HEAD --pretty=format:"%H" --no-patch | cut -c 1-2)
COMMIT_OBJ=$(git show HEAD --pretty=format:"%H" --no-patch | cut -c 3-)

pigz -cd .git/objects/$COMMIT_DIR/$COMMIT_OBJ |
perl -0777 -nE 'print join "\n", unpack("Z*A*")'
```

```{r echo=FALSE, message=FALSE, warning=FALSE}
# Create the graph, this time without filtering the commit
tbl_graph(
    nodes = repo_nodes(),
    edges = repo_edges()
) %>%
    git_graph() +
    labs(
        title = 'Git Object Structure',
        subtitle = 'Tree and Blob Objects'
    )
```

```{zsh}
echo "Hello Root" > file_x
git add file_x
git commit -m "Second Commit"
```

```{zsh}
COMMIT_DIR=$(git show HEAD --pretty=format:"%H" --no-patch | cut -c 1-2)
COMMIT_OBJ=$(git show HEAD --pretty=format:"%H" --no-patch | cut -c 3-)

pigz -cd .git/objects/$COMMIT_DIR/$COMMIT_OBJ |
perl -0777 -nE 'print join "\n", unpack("Z*A*")'
```
```{r echo=FALSE, message=FALSE, warning=FALSE}
# Create the graph, this time without filtering the commit
tbl_graph(
    nodes = repo_nodes(),
    edges = repo_edges()
) %>%
    git_graph() +
    labs(
        title = 'Git Object Structure',
        subtitle = 'Multiple Commit Hierarchy'
    )
```


# Branches

```{zsh}
cat .git/HEAD
cat .git/refs/heads/master
```

# Index
```{zsh}
perl -MData::Dumper -0777 -nE '
my @index = unpack("A4 H8 N/(N4 N2 B16 B16 N N N H40 B8 W/A B16 x![4])");
say join(" ", @index[ ($_ * 15) + 2 ..  ($_ * 15) + 17])  foreach (0 .. (scalar (@index - 2) / 15) - 1)
' .git/index
```



```{zsh include=FALSE}
rm -rf .git file_* subdir
```

