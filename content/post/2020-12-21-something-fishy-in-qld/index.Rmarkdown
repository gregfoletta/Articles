---
title: Something Fishy in QLD
author: Greg Foletta
date: '2020-12-19'
slug: something-fishy-in-qld 
categories: [R]
---


This is a draft article looking at horse racing results, trying to determine with what kind of accuracy we can pick the winner of a race. We'll be focusing on the Moonee Valley track in Melbourne (with a small digression at the end), trying a few different approaches:

- Picking a random horse
- Picking the favourite
- Looking at barrier position and track condition

```{r message=FALSE}
library(tidyverse)
library(encryptr)
library(gt)
library(zip)
library(glue)
library(furrr)
library(tictoc)
library(lubridate)
```


```{r include=FALSE}
results_file <- 'hr_results.csv.zip.encryptr.bin'

if(!file.exists(results_file)) {
    download.file(
        url = glue('https://gregfoletta.s3-ap-southeast-2.amazonaws.com/articles-data/{results_file}'),
        destfile = results_file
    )
}


decrypt_file(results_file)
unzip(str_remove(results_file, '.encryptr.bin'))

hr_results <- read_csv(
    'hr_results.csv',
    col_types = cols(
        race_id = col_double(),
        track = col_character(),
        state = col_character(),
        results_link = col_character(),
        date = col_date(format = ""),
        raceday_link = col_character(),
        race_number = col_double(),
        position = col_character(),
        horse.name = col_character(),
        horse.number = col_double(),
        barrier = col_double(),
        margin = col_double(),
        weight = col_double(),
        horse.age = col_double(),
        horse.type = col_character(),
        trainer = col_character(),
        jockey = col_character(),
        horse.ancestry = col_character(),
        odds.sp = col_double(),
        odds.stab = col_double(),
        odds.nsw = col_double(),
        odds.ubet = col_double(),
        odds.sb = col_double(),
        race_duration = col_character(),
        race_datetime = col_datetime(),
        rail_position = col_character(),
        race_name = col_character(),
        length = col_double(),
        class = col_character(),
        condition = col_character(),
        error = col_character(),
        track_race_id = col_double(),
        result = col_character(),
        condition.num = col_double(),
        odds.sp.win = col_double()
    )
)

file.remove('hr_results.csv')
file.remove('hr_results.csv.zip')
```

# An Explore

```{r}
hr_results %>% 
    count(state, month = floor_date(date, '1 month')) %>% 
    ggplot() +
    geom_line(aes(month, n, colour = state)) +
    labs(
        title = 'Number of Race Days per Month per State',
        x = 'Month',
        y = 'Race Days'
    )
```

Top winners

```{r}
hr_results %>% 
    filter(position == 1) %>% 
    count(horse.name, name = 'wins') %>%
    slice_max(wins, n = 10) %>% 
    ggplot() +
    geom_col(aes(fct_reorder(horse.name, wins), wins), fill = 'lightblue') +
    coord_flip() +
    labs(
        title = 'Top Winning Horses (2011 - 2020)',
        x = 'Horse Name',
        y = 'Wins'
    )
```
Top tracks:

```{r}
hr_results %>% 
    filter(race_number == 1) %>% 
    count(track, name = 'races') %>% 
    slice_max(races, n = 10) %>% 
    ggplot() +
    geom_col(aes(fct_reorder(track, races), races), fill = 'darkgreen') +
    coord_flip() +
    labs(
        title = 'Tracks - Total Race Days (2011 - 2020)',
        x = 'Tack Name',
        y = 'Race Days'
    )
```


# Monte-Carlo Cross Validation

```{r}
mc_sample <- function(data, times, prop) {
    data %>% 
        mc_cv(times = times, prop = prop) %>% 
        mutate(analysis = map(splits, ~analysis(.x))) %>%
        select(-c(id, splits))
}

hr_results <- hr_results %>%
    group_by(race_id) %>% 
    nest()
```

```{r}
plan(multisession, workers = 30)
tic()
hr_mccv <- future_map(1:500, ~{ mc_sample(hr_results, times = 1, prop = .01) }, .options = furrr_options(seed = TRUE))
toc()
```

```{r}
hr_mccv %>% 
    bind_rows() %>% 
    mutate(sample_id = 1:n()) %>% 
    unnest(cols = analysis) %>% 
    unnest(cols = data)
```


```{r}
hr_random <- hr_mccv %>% 
    drop_na(odds.sp) %>%
    group_by(sample_id, race_id) %>% 
    slice_sample(n = 1) %>% 
    ungroup()

hr_favourite <- hr_mccv %>% 
    drop_na(odds.sp) %>% 
    group_by(sample_id, race_id) %>% 
    mutate(odds.rank = order(odds.sp)) %>% 
    slice_min(odds.rank, with_ties = FALSE, n = 1) %>% 
    ungroup()
```

# Approach 1: Random Selection

Take a random sample from each race.



Place bets and add up cumulative returns

```{r}
hr_random <- hr_random %>%
    mutate(bet.return = if_else(position == 1, odds.sp, -1)) %>% 
    group_by(sample_id) %>% 
    mutate(
        sample_race_index = 1:n(),
        cumulative.return = cumsum(bet.return)
    ) %>% 
    ungroup()

hr_random %>% 
    filter(sample_id %in% c(1:40)) %>% 
    ggplot() +
    geom_line(aes(sample_race_index, cumulative.return, group = sample_id), alpha = .5) +
    labs(
        title = "Dollar Bets - Random",
        x = 'Race Index',
        y = 'Dollars'
    )
hr_random %>% 
    group_by(sample_id) %>% 
    summarise(return = sum(bet.return)) %>%
    ggplot() +
    geom_histogram(aes(return), binwidth = 5) +
    geom_vline(aes(xintercept = mean(return))) +
    labs(
        title = 'Dollar Bet - Random Horse - Returns',
        x = 'Sample Race Index',
        y = 'Dollars'
    )
```


# Approach 2 - Favourite

```{r}
hr_favourite <- hr_favourite %>% 
    mutate(bet.return = if_else(position == 1, odds.sp, -1)) %>% 
    group_by(sample_id) %>% 
    mutate(
        sample_race_index = 1:n(),
        cumulative.return = cumsum(bet.return)
    ) %>% 
    ungroup()
```


```{r}
hr_favourite %>%
    filter(sample_id %in% sample(1:40)) %>% 
    ggplot() +
    geom_line(aes(sample_race_index, cumulative.return, group = sample_id), alpha = .5) +
    labs(
        title = "Dollar Bets - Favourites",
        x = 'Race'
    )
```

```{r}
hr_favourite %>% 
    group_by(sample_id) %>% 
    summarise(return = sum(bet.return)) %>%
    ggplot() +
    geom_histogram(aes(return), binwidth = 5) +
    geom_vline(aes(xintercept = mean(return))) +
    labs(
        title = 'Dollar Bet - Favourite - Returns',
        x = 'Sample Race Index',
        y = 'Dollars'
    )
```
